<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
			default-autowire="byName" default-lazy-init="false">
	<!-- Spring getBean定义 -->
	<bean id="springContextHolder" class="com.mall.core.common.SpringContextHolder" lazy-init="false"/>

	<!-- 生成长整形15位ID -->
	<bean id="fifteenLongIdImpl" class="com.mall.core.common.impl.FifteenLongIdImpl">
		<constructor-arg index="0">
	    	<value>1</value>
	    </constructor-arg>
	</bean>
	
	<!-- 属性文件读入 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 数据库连接池 配置  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${mysql.url}" />
	    <property name="username" value="${mysql.username}" />
	    <property name="password" value="${mysql.password}" />
	    <property name="filters" value="stat" />
	    <property name="maxActive" value="200" />
	    <property name="initialSize" value="20" />
	    <property name="maxWait" value="60000" />
	    <property name="minIdle" value="1" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	<!-- spring jdbc配置 -->
	<bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--mybaits 集成配置 -->
  	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"/>
	 	<property name="mapperLocations" value="classpath*:mybaits/mapper/*.xml" />
  	</bean>
	<bean id="myBaitsTemplate" class="com.mall.core.dao.MyBaitsTemplate" />
  
	<!-- 注解的配置  -->
	<context:component-scan base-package="com.qtz.ht">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:component-scan base-package="com.qtz.session">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
  
	<!-- start 日志aop 拦截器 -->
	<!-- service日志记录器 -->
	<bean id="loggerService" class="com.mall.core.aop.LoggerServiceAop" />
	<!-- dao日志记录器 -->
	<bean id="loggerDao" class="com.mall.core.aop.LoggerDaoAop" />
	<!--end 日志aop 拦截器 -->

	<!--事务的配置-->
  	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">     
          <property name="dataSource" ref="dataSource"></property>
  	</bean>
  	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
		  	<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
		  	<tx:method name="del*" propagation="REQUIRED" read-only="false"	rollback-for="java.lang.Exception"/>
		  	<tx:method name="mod*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
		  	<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
		  	<tx:method name="compute*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
	      
	      	<tx:method name="find*" propagation="SUPPORTS"/>
	      	<tx:method name="get*" propagation="SUPPORTS"/>
	      	<tx:method name="select*" propagation="SUPPORTS"/>
	      	<tx:method name="query*" propagation="SUPPORTS"/>
	    </tx:attributes>
  	</tx:advice>
  
	<!--把事务控制在Service层 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com..service.impl..*.*(..))"/>
 		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" order="101"/>
		<!-- service日志通知   -->
		<aop:aspect id="loggerServiceAspect" ref="loggerService" order="100">
			<aop:around method="record" pointcut="execution(* com..service.impl..*.*(..))"/>
		</aop:aspect>
	</aop:config>
	
 	<!-- 使用annotation定义事务 -->
 	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
 	
 	<import resource="dubbo/dubbo.xml"/>
</beans>